# Copyright (c) 2018-2021 Simply Code Ltd. All rights reserved.
# Licensed under the MIT License.
# See LICENSE file in the project root for full license information.

os: linux
dist: focal
language: csharp
dotnet: 6.0
mono: none
solution: PackIt.sln

addons:
  apt:
    packages:
      - doxygen
      - nuget
  sonarcloud:
    organization: simplycodeuk

env:
  global:
    - ASPNETCORE_ENVIRONMENT: Development
    - DOTNET_PRINT_TELEMETRY_MESSAGE: false
    - DOTNET_CLI_TELEMETRY_OPTOUT: true
    - VAGRANT_DEFAULT_PROVIDER: libvirt
  jobs:
    - CONFIG=Release
    - CONFIG=Debug

cache:
  yarn: yes
  directories:
  - /home/travis/.vagrant.d/boxes

before_install:
  # Repo for Yarn
  - sudo apt-key adv --fetch-keys http://dl.yarnpkg.com/debian/pubkey.gpg
  - echo "deb http://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
  - sudo apt-get update -qq
  - sudo apt-get install -y -qq yarn=1.22.*
  - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
  - chmod +x ./cc-test-reporter

install:
  # Install Vagrant and libvirt
  - |
    curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
    sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
    sudo apt-get update && sudo apt-get install vagrant
    sudo apt-get install -y build-essential qemu-kvm qemu-utils libvirt-dev libvirt-daemon-system libvirt-clients bridge-utils virtinst virt-manager dnsmasq
    sudo vagrant plugin install vagrant-libvirt

  # Vagrant correctly installed?
  - vagrant --version

  - echo -e
    '{
       "service":{
         "Materials":{
           "url":"http://localhost:8100/api/v1/"
         },
         "Packs":{
           "url":"http://localhost:8100/api/v1/"
         },
         "Plans":{
           "url":"http://localhost:8100/api/v1/"
         },
         "Uploads":{
           "url":"http://localhost:8100/api/v1/"
         }
       }
    }' >./PackIt/bdd/specflow.local.json

  - echo -e
    '{
       "service":{
         "Drawings":{
           "url":"http://localhost:8200/api/v1/"
         }
     }
    }' >./PackItDraw/bdd/specflow.local.json

  - nuget restore PackIt.sln
  - dotnet --version
  - dotnet restore PackIt.sln

script:
  - doxygen ./docs/doxygen
  - sonar-scanner
  - dotnet build PackItLib/src/PackItLib.csproj         -c $CONFIG /p:DocumentationFile=codedoc.xml
  - dotnet build PackItLib/test/PackItLib.Test.csproj   -c $CONFIG /p:DocumentationFile=codedoc.xml
  - dotnet build PackItMock/src/PackItMock.csproj       -c $CONFIG /p:DocumentationFile=codedoc.xml
  - dotnet build PackItBdd/src/PackItBdd.csproj         -c $CONFIG /p:DocumentationFile=codedoc.xml
  - dotnet build PackItBdd/test/PackItBdd.Test.csproj   -c $CONFIG /p:DocumentationFile=codedoc.xml
  - dotnet build PackIt/src/PackIt.csproj               -c $CONFIG /p:DocumentationFile=codedoc.xml
  - dotnet build PackIt/test/PackIt.Test.csproj         -c $CONFIG /p:DocumentationFile=codedoc.xml
  - dotnet build PackItDraw/src/PackItDraw.csproj       -c $CONFIG /p:DocumentationFile=codedoc.xml
  - dotnet build PackItDraw/test/PackItDraw.Test.csproj -c $CONFIG /p:DocumentationFile=codedoc.xml
  - dotnet build PackItUI/src/PackItUI.csproj           -c $CONFIG /p:DocumentationFile=codedoc.xml
  - dotnet build PackItUI/test/PackItUI.Test.csproj     -c $CONFIG /p:DocumentationFile=codedoc.xml
  - dotnet pack PackItLib/src/PackItLib.csproj          -c $CONFIG
  - dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:ExcludeFromCoverage="**/*.cshtml" PackItLib/test/PackItLib.Test.csproj   -c $CONFIG --logger:trx
  - dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:ExcludeFromCoverage="**/*.cshtml" PackItBdd/test/PackItBdd.Test.csproj   -c $CONFIG --logger:trx
  - dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:ExcludeFromCoverage="**/*.cshtml" PackIt/test/PackIt.Test.csproj         -c $CONFIG --logger:trx
  - dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:ExcludeFromCoverage="**/*.cshtml" PackItDraw/test/PackItDraw.Test.csproj -c $CONFIG --logger:trx
  - dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:ExcludeFromCoverage="**/*.cshtml" PackItUI/test/PackItUI.Test.csproj     -c $CONFIG --logger:trx
  - sudo vagrant up
  - wget localhost:8100/api/v1
  - wget localhost:8200/api/v1
  - wget localhost:8080
  - dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:ExcludeFromCoverage="**/*.cshtml" PackIt/bdd/PackIt.Bdd.csproj         -c $CONFIG --logger:trx
  - dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:ExcludeFromCoverage="**/*.cshtml" PackItDraw/bdd/PackItDraw.Bdd.csproj -c $CONFIG --logger:trx

# Pipe the coverage data to Code Climate
after_script:
  - ./cc-test-reporter format-coverage -t lcov -o ./coverage/codeclimate.PackItLib.json ./PackItLib/test/coverage.info
  - ./cc-test-reporter format-coverage -t lcov -o ./coverage/codeclimate.PackItMock.json ./PackItMock/test/coverage.info
  - ./cc-test-reporter format-coverage -t lcov -o ./coverage/codeclimate.PackIt.json ./PackIt/test/coverage.info
  - ./cc-test-reporter format-coverage -t lcov -o ./coverage/codeclimate.PackItDraw.json ./PackItDraw/test/coverage.info
  - ./cc-test-reporter format-coverage -t lcov -o ./coverage/codeclimate.PackItUI.json ./PackItUI/test/coverage.info
  - ./cc-test-reporter sum-coverage coverage/codeclimate.*.json -p 4
  - ./cc-test-reporter upload-coverage
  - bash <(curl -Ls https://coverage.codacy.com/get.sh) report --partial -r ./PackItLib/test/coverage.info
  - bash <(curl -Ls https://coverage.codacy.com/get.sh) report --partial -r ./PackItBdd/test/coverage.info
  - bash <(curl -Ls https://coverage.codacy.com/get.sh) report --partial -r ./PackIt/test/coverage.info
  - bash <(curl -Ls https://coverage.codacy.com/get.sh) report --partial -r ./PackItDraw/test/coverage.info
  - bash <(curl -Ls https://coverage.codacy.com/get.sh) report --partial -r ./PackItUI/test/coverage.info
  - bash <(curl -Ls https://coverage.codacy.com/get.sh) final

notifications:
  slack: simplycodeuk:FZI8WzeengkGv5LI7WQSCrJs
