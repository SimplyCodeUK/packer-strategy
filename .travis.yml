# Copyright (c) 2018-2021 Simply Code Ltd. All rights reserved.
# Licensed under the MIT License.
# See LICENSE file in the project root for full license information.

sudo: required
dist: bionic
language: csharp
solution: PackIt.sln

addons:
  apt:
    packages:
      - doxygen
  sonarcloud:
    organization: simplycodeuk

mono:
  - latest

dotnet: 5.0

env:
  global:
    - ASPNETCORE_ENVIRONMENT=Development
    - DOTNET_PRINT_TELEMETRY_MESSAGE=false
    - DOTNET_CLI_TELEMETRY_OPTOUT=true
  matrix:
    - CONFIG=Release
    - CONFIG=Debug

before_install:
  # Repo for Yarn
  - sudo apt-key adv --fetch-keys http://dl.yarnpkg.com/debian/pubkey.gpg
  - echo "deb http://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
  - sudo apt-get update -qq
  - sudo apt-get install -y -qq yarn=1.22.*
  - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
  - chmod +x ./cc-test-reporter

cache:
  yarn: yes

install:
  - nuget restore PackIt.sln
  - dotnet --version
  - dotnet restore PackIt.sln

script:
  - doxygen docs/doxygen
  - sonar-scanner
  - dotnet build PackItLib/src/PackItLib.csproj         --configuration $CONFIG
  - dotnet build PackItLib/test/PackItLib.Test.csproj   --configuration $CONFIG
  - dotnet build PackIt/src/PackIt.csproj               --configuration $CONFIG
  - dotnet build PackIt/test/PackIt.Test.csproj         --configuration $CONFIG
  - dotnet build PackItDraw/src/PackItDraw.csproj       --configuration $CONFIG
  - dotnet build PackItDraw/test/PackItDraw.Test.csproj --configuration $CONFIG
  - dotnet build PackItUI/src/PackItUI.csproj           --configuration $CONFIG
  - dotnet build PackItUI/test/PackItUI.Test.csproj     --configuration $CONFIG
  - dotnet pack PackItLib/src/PackItLib.csproj          --configuration $CONFIG
  - dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:ExcludeFromCoverage="**/*.cshtml" PackItLib/test/PackItLib.Test.csproj   --configuration $CONFIG --logger:trx
  - dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:ExcludeFromCoverage="**/*.cshtml" PackIt/test/PackIt.Test.csproj         --configuration $CONFIG --logger:trx
  - dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:ExcludeFromCoverage="**/*.cshtml" PackItDraw/test/PackItDraw.Test.csproj --configuration $CONFIG --logger:trx
  - dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:ExcludeFromCoverage="**/*.cshtml" PackItUI/test/PackItUI.Test.csproj     --configuration $CONFIG --logger:trx

# Pipe the coverage data to Code Climate
after_script:
  - ./cc-test-reporter format-coverage -t lcov -o ./coverage/codeclimate.PackItLib.json ./PackItLib/test/coverage.info
  - ./cc-test-reporter format-coverage -t lcov -o ./coverage/codeclimate.PackIt.json ./PackIt/test/coverage.info
  - ./cc-test-reporter format-coverage -t lcov -o ./coverage/codeclimate.PackItDraw.json ./PackItDraw/test/coverage.info
  - ./cc-test-reporter format-coverage -t lcov -o ./coverage/codeclimate.PackItUI.json ./PackItUI/test/coverage.info
  - ./cc-test-reporter sum-coverage coverage/codeclimate.*.json -p 4
  - ./cc-test-reporter upload-coverage
  - bash <(curl -Ls https://coverage.codacy.com/get.sh) report --partial -r ./PackItLib/test/coverage.info
  - bash <(curl -Ls https://coverage.codacy.com/get.sh) report --partial -r ./PackIt/test/coverage.info
  - bash <(curl -Ls https://coverage.codacy.com/get.sh) report --partial -r ./PackItDraw/test/coverage.info
  - bash <(curl -Ls https://coverage.codacy.com/get.sh) report --partial -r ./PackItUI/test/coverage.info
  - bash <(curl -Ls https://coverage.codacy.com/get.sh) final

notifications:
  slack: simplycodeuk:FZI8WzeengkGv5LI7WQSCrJs
